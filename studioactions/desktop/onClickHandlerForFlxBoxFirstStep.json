{
    "AS_FlexContainer_a6af7481806545e9805f9c327100362f": {
        "id": "AS_FlexContainer_a6af7481806545e9805f9c327100362f",
        "type": "ACTION_SEQUENCE",
        "name": "onClickHandlerForFlxBoxFirstStep",
        "params": [{
            "datatype": "collection",
            "name": "eventobject"
        }],
        "language": "js",
        "eventType": "onClick",
        "actions": [{
            "id": "ADD_SNIPPET_ide_onClick_c175c8eb0b07418a807f99a3d32575c0",
            "type": "ADD_SNIPPET",
            "codeSnippet": "/* In this snippet we retrieve all the step boxes (if more than the first) and we set them\nall not selected (white background and no icons shown). At the end we put the first step box\nas selected (black background and icons shown).\n*/\n\n// retrieving all step's boxes\nlet steps_widgets = self.view.flxSteps.widgets();\n\nvoltmx.print(\"### flxSteps number of widget (-plus box- included): \" + JSON.stringify(steps_widgets.length));\n\n// many steps already existing\nif (steps_widgets.length > 2){\n  let flxScrolls = this.view.flxRightSide.widgets();\n\n  // for each step box existing, I set them non-focused (white background and no icons shown)\n  for (let stepNumber = 2; stepNumber <= gblLastInsertedStep; stepNumber++) {\n    let currentStepId = 'boxStep' + stepNumber;\n    let currentScrollId = 'flxScrollRight' + stepNumber;\n    let widget = steps_widgets.find(w => w.newId === currentStepId || w.id === currentStepId);\n    if (widget) {\n      widget.flxBoxStep.backgroundColor = \"FFFFFF00\";\n      widget.imgDeleteStep.isVisible = false;\n      widget.imgEditStep.isVisible = false;\n      widget.lblStepOrder.fontColor = \"00000000\";\n      widget.lblStepTitle.fontColor = \"00000000\";   \n    }\n    // showing only scroll related to the first step\n    let scroll = flxScrolls.find(s => s.newId === currentScrollId || s.id === currentScrollId);\n    if (scroll) {\n      scroll.isVisible = false;\n    }\n  }\n}\n\n// setting the first step's box on focus (black background, icons shown, related scroll shown)\nthis.view.flxBoxFirstStep.backgroundColor = \"00000000\";\nthis.view.flxBoxFirstStep.imgDeleteStep.isVisible = true;\nthis.view.flxBoxFirstStep.imgEditStep.isVisible = true;\nthis.view.flxBoxFirstStep.lblStepOrder.fontColor = \"FFFFFF00\";\nthis.view.flxBoxFirstStep.lblStepTitleIntoStepComposition.fontColor = \"FFFFFF00\";\nthis.view.flxRightSide.flxScrollRight.setVisibility(true);\nthis.view.settingsSide.flxScrollSettingsContent.removeAll();\nthis.view.settingsSide.flxScrollSettingsContent.setVisibility(false);\nthis.view.settingsSide.txt.setVisibility(true);\ngblCurrentStepOrder = 1;\ngblCurrentStepTitle = this.view.lblStepTitleIntoStepComposition.text;\nvoltmx.print(\"### CURRENT STEP ORDER: \" + JSON.stringify(gblCurrentStepOrder));\n\n\n\n// if the this (first) step has no components, show the default message\nlet hasComponents = Object.keys(this.view.flxRightSide.flxScrollRight).some(key => key.startsWith('flex'));  // perchè nelle varie proprietà, se sono presenti componenti si trovano in \"flex...\"\nif (hasComponents) {\n  this.view.imgNoComponentsRight.setVisibility(false);\n  this.view.lblNoComponentsRight.setVisibility(false);\n  this.view.txtStartPhraseRight.setVisibility(false);\n} else {\n  this.view.imgNoComponentsRight.setVisibility(true);\n  this.view.lblNoComponentsRight.setVisibility(true);\n  this.view.txtStartPhraseRight.setVisibility(true);\n} \n\n\n\n"
        }]
    }
}