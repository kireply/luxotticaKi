{
    "AS_TextField_j99564adfa424bad89b361f64c56efd4": {
        "id": "AS_TextField_j99564adfa424bad89b361f64c56efd4",
        "type": "ACTION_SEQUENCE",
        "name": "onTextChangeHandlerForTxtSearchLabelCopy",
        "params": [{
            "datatype": "collection",
            "name": "eventobject"
        }, {
            "datatype": "string",
            "name": "changedtext"
        }],
        "contextObj": {
            "name": "frmLabelCopy",
            "type": "forms",
            "platform": "",
            "KUID": "d542af1533cb4c91820f2aa7d069320e"
        },
        "language": "js",
        "eventType": "onTextChange",
        "actions": [{
            "id": "ADD_SNIPPET_f0af9a4b061d4f539830ff19b313737e",
            "type": "ADD_SNIPPET",
            "codeSnippet": "debugger;\nvoltmx.print(\"### labelCopyList: \" + labelCopyList);\n\nvar labelSearched = this.view.txtSearchLabel.text;\n\nif (labelSearched !== \"\") { \n  \n  voltmx.print(\"### dentro IF filtro label\");\n  \n  // filtering the list based on input (checking all columns)\n  var filteredList = labelCopyList.filter(elemento => {\n    return Object.values(elemento).some(valore => valore.toLowerCase().includes(labelSearched.to.toLowerCase()));\n  });\n  \n    voltmx.print(\"### filteredList stringify: \" + JSON.stringify(filteredList) );\n  \n  this.view.segLabels.setData(filteredList);\n  \n} else { // no filter, show entire list\n  \n  this.view.segLabels.setData(labelCopyList);\n}\n\n\n/*\n\n\n//backup to original list every time the selection changes\n//self.view.segFlows.setData(gblFlowsList);\n\nvar filteredByChannel = gblFlowsList.filter(flow => flow.channel_id === gblChannelId);\n\n// Retrieving all filters\nvar nameSelected = this.view.txtSearchFlowName.text;\nvar categorySelected = this.view.lbCategory.selectedKeyValue[1];\nvar statusSelected = this.view.lbStatus.selectedKeyValue[1];\nvar environmentSelected = this.view.lbEnvironment.selectedKeyValue[1];\n\n//voltmx.print(\"### Category: \" + categorySelected);\n\n\n// Apply all filters one by one on cascade\nif (nameSelected !== \"\") { // name selected, unique\n  \n  voltmx.print(\"### dentro IF filtri\");\n  var filteredByName = filteredByChannel.filter(flow => flow.id.toLowerCase().includes(nameSelected.toLowerCase()));\n  self.view.segFlows.setData(filteredByName);\n  \n  this.view.lbCategory.selectedKey = \"lb1\";\n  this.view.lbStatus.selectedKey = \"lb1\";\n  this.view.lbEnvironment.selectedKey = \"lb1\";\n  \n  this.view.lbCategory.setEnabled(false);\n  this.view.lbStatus.setEnabled(false);\n  this.view.lbEnvironment.setEnabled(false);\n  \n  \n} else { // name not selected, sum up all the other filters if selected\n  \n  this.view.lbCategory.setEnabled(true);\n  this.view.lbStatus.setEnabled(true);\n  this.view.lbEnvironment.setEnabled(true);\n  \n  voltmx.print(\"### dentro ELSE filtri\");\n  \n  var filteredByCategory = filteredByChannel;\n  \n  if (categorySelected !== \"Category: All\") {\n    filteredByCategory = filteredByChannel.filter(flow => flow.category === categorySelected);\n  }\n  var filteredByStatus = filteredByCategory;\n  \n  if (statusSelected !== \"Status: All\") {\n    filteredByStatus = filteredByCategory.filter(flow => flow.status === statusSelected);\n  }\n  var filteredByEnvironment = filteredByStatus;\n  \n  if (environmentSelected !== \"Environment: All\") {\n    filteredByEnvironment = filteredByStatus.filter(flow => flow.environment === environmentSelected);\n  }\n  \n  self.view.segFlows.setData(filteredByEnvironment);\n  \n}\n\n\n\n//self.view.segFlows.widgetDataMap = {lblStatus: \"status\", lblFlowName: \"id\", lblDescription: \"description\", lblCategory: \"category\", lblDefault: \"default_flag\", lblEnvironment: \"environment\", lblAuthor: \"author\", lblLastModified: \"last_modified\"};\n//self.view.segFlows.setData(flowsFound);\n\n//voltmx.print(\"### PROVA: \" + self.view.segFlows.data[1].description);\n\n*/\n",
            "parentId": null
        }]
    }
}